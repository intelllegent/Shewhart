"X(mm)" = "numeric",
"Y(mm)" = "numeric",
"Thickness(nm)" = "numeric",
"Thickness PRE(nm)" = "numeric",
"Thickness POST(nm)" = "numeric",
"Dep time(s)" = "numeric",
"Dep Rate (nm/min)" = "numeric",
"Average Thickness(nm)" = "numeric",
"Max(nm)" = "numeric",
"Min(nm)" = "numeric",
"Delta" = "numeric",
"Delta, nm" = "numeric",
"Delta (nm)" = "numeric",
"NU, %" = "numeric",
"guess")
return(k)
}
}
length(aaa)
aaa <- get_types(n)
length(aaa)
get_types <- function(column_names){
i=1
for (i in 1:(length(column_names))){
x = column_names[i]
k[i] <- switch(x,
"Date" = "date",
"Material" = "text",
"FOUP ID" = "text",
"Wafer ID" = "text",
"Deposition/Sputter" = "text",
"Test's type" = "text",
"Use" = "text",
"Test type" = "text",
"Recipe" = "text",
"Operator" = "text",
"Point" = "numeric",
"X(mm)" = "numeric",
"Y(mm)" = "numeric",
"Thickness(nm)" = "numeric",
"Thickness PRE(nm)" = "numeric",
"Thickness POST(nm)" = "numeric",
"Dep time(s)" = "numeric",
"Dep Rate (nm/min)" = "numeric",
"Average Thickness(nm)" = "numeric",
"Max(nm)" = "numeric",
"Min(nm)" = "numeric",
"Delta" = "numeric",
"Delta, nm" = "numeric",
"Delta (nm)" = "numeric",
"NU, %" = "numeric",
"guess")
return(k)
}
}
aaa <- get_types(n)
length(aaa)
length(n)
get_types <- function(column_names){
i=1
for (i in 1:(length(column_names)+1)){
x = column_names[i]
k[i] <- switch(x,
"Date" = "date",
"Material" = "text",
"FOUP ID" = "text",
"Wafer ID" = "text",
"Deposition/Sputter" = "text",
"Test's type" = "text",
"Use" = "text",
"Test type" = "text",
"Recipe" = "text",
"Operator" = "text",
"Point" = "numeric",
"X(mm)" = "numeric",
"Y(mm)" = "numeric",
"Thickness(nm)" = "numeric",
"Thickness PRE(nm)" = "numeric",
"Thickness POST(nm)" = "numeric",
"Dep time(s)" = "numeric",
"Dep Rate (nm/min)" = "numeric",
"Average Thickness(nm)" = "numeric",
"Max(nm)" = "numeric",
"Min(nm)" = "numeric",
"Delta" = "numeric",
"Delta, nm" = "numeric",
"Delta (nm)" = "numeric",
"NU, %" = "numeric",
"guess")
return(k)
}
}
length(n)
aaa <- get_types(n)
length(aaa)
length(n)
get_types <- function(column_names){
i=1
for (i in 1:(length(column_names)+1)){
x = column_names[i]
k[i] <- switch(x,
"Date" = "date",
"Material" = "text",
"FOUP ID" = "text",
"Wafer ID" = "text",
"Deposition/Sputter" = "text",
"Test's type" = "text",
"Use" = "text",
"Test type" = "text",
"Recipe" = "text",
"Operator" = "text",
"Point" = "numeric",
"X(mm)" = "numeric",
"Y(mm)" = "numeric",
"Thickness(nm)" = "numeric",
"Thickness PRE(nm)" = "numeric",
"Thickness POST(nm)" = "numeric",
"Dep time(s)" = "numeric",
"Dep Rate (nm/min)" = "numeric",
"Average Thickness(nm)" = "numeric",
"Max(nm)" = "numeric",
"Min(nm)" = "numeric",
"Delta" = "numeric",
"Delta, nm" = "numeric",
"Delta (nm)" = "numeric",
"NU, %" = "numeric",
"guess")
}
return(k)
}
length(n)
aaa <- get_types(n)
length(aaa)
aaa
runApp()
plot$x
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c("1","2","3","4","5")
b <- c("2","3","5")
setdiff(a,b)
setdiff(b,a)
runApp()
runApp('D:/R_Projects/Graph.R')
runApp('D:/R_Projects/Graph.R')
runApp('D:/R_Projects/Inme/Graph.R')
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
col_names
col_names()
isolate(col_names())
runApp()
install.packages("xlconnect")
install.packages("XLConnect")
library(XLConnect)
library(XLConnect)
library('XLConnect')
library('XLConnectJars')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a
b
setdiff(a,b)
setdiff(a,b)
setdiff(b,a)
runApp()
a$1
a[1]
grep("1",a)
grep("4",a)
grep("6",a)
runApp()
runApp()
runApp()
shiny::runApp()
vec <- vector(mode="integer")
vec[1] <- 1
bec[1]
vec[1]
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
tes=0
tes
tes==0
tes!=0
runApp()
runApp()
runApp()
runApp()
runApp()
ф
a
b
grep(a,b)
c
c <- grep(a,b)
c
grepRaw("no match", "textText")  # integer(0): no match
grepRaw("adf", "adadfadfdfadadf") # 3 - the first match
grepRaw("adf", "adadfadfdfadadf",
all=TRUE, fixed=TRUE)
grepRaw("no match", a)
a
b
grep("1", b)
test <- grep("1", b)
is.empty.model(test)
is.empty(test)
is.null(test)
runApp()
runApp()
runApp()
runApp()
runApp()
число = 2
round(число, 2)
число = 2.2323232
round(число, 2)
число = 2.2363232
round(число, 2)
data <- read_excel("FRT Weekly Monitoting.xlsx", sheet = 1, col_names = TRUE, n_max = 1)
library(read_exel)
library(tidyverse)
library(readxl)
data <- read_excel("FRT Weekly Monitoting.xlsx", sheet = 1, col_names = TRUE, n_max = 1)
data
View(data)
data&Date
data[1]
data[2]
data <- read_excel("FRT Weekly Monitoting.xlsx", sheet = 1, col_names = TRUE, n_max = 2)
data <- read_excel("FRT Weekly Monitoting.xlsx", sheet = 1, col_names = TRUE, n_max = 0)
data <- read_excel("FRT Weekly Monitoting.xlsx", sheet = 1, col_names = TRUE, n_max = 1)
data <- read_excel("FRT Weekly Monitoting.xlsx", sheet = 1, col_names = TRUE, n_max = 0)
data <- read_excel("FRT Weekly Monitoting.xlsx", sheet = 1, col_names = TRUE, n_max = 2)
data&Date
data[1]
data[6]
data[10] <- round(data[10],1)
data[11] <- round(data[11],1)
data[11] <- round(data[11],0)
data[10,2]
data[10,1]
data[,1]
data[1]
data[1,1]
data[1,2]
data[1,10]
data[2,10]
data[2,10] <- NA
shiny::runApp()
runApp()
runApp()
View(data)
i =10
for (i in 1:15){}
for (i in 1:15){print(i)}
runApp()
runApp()
i_col_type
data
runApp()
View(data)
View(data)
View(data)
View(data)
runApp()
View(data)
View(data)
runApp()
View(data)
View(data)
View(data)
View(data)
View(data)
runApp()
View(data)
View(data)
View(data)
View(data)
View(output)
data <- read_excel("FRT Weekly Monitoting.xlsx", sheet = 1, col_names = TRUE, n_max = 2)
data&col_names
data&col_types
str(data)
runApp()
runApp()
unique(a,b)
a
b
setdiff(a, "1")
runApp()
buff
i_col_type
setdiff(i_col_type,"skip")
data&names()
a
a[5] <- "1"
a
setdiff(a,"1")
runApp()
buff <- vector(mode="character")
buff
buff <- setdiff(i_col_type,"skip")
buff <- setdiff(c("skip",   "text" ,   "text" ,   "text",    "text" ,   "text"  ,  "numeric" ,"numeric", "numeric", "numeric", "numeric",
"numeric", "numeric" ,"numeric", "skip"),"skip")
buff
buff <- c("skip",   "text" ,   "text" ,   "text",    "text" ,   "text"  ,  "numeric" ,"numeric", "numeric", "numeric", "numeric",
"numeric", "numeric" ,"numeric", "skip")
buff
gsub("skip",buff)
gsub("skip","",buff)
runApp()
x <- c("text",NA,"text",NA,"text","text")
anyNA(x, recursive = FALSE)
shiny::runApp()
runApp()
if (interactive()) {
# Show a message when button is clicked
shinyApp(
ui = fluidPage(
actionButton("show", "Show")
),
server = function(input, output) {
observeEvent(input$show, {
showNotification("Message text",
action = a(href = "javascript:location.reload();", "Reload page")
)
})
}
)
# App with show and remove buttons
shinyApp(
ui = fluidPage(
actionButton("show", "Show"),
actionButton("remove", "Remove")
),
server = function(input, output) {
# A queue of notification IDs
ids <- character(0)
# A counter
n <- 0
observeEvent(input$show, {
# Save the ID for removal later
id <- showNotification(paste("Message", n), duration = NULL)
ids <<- c(ids, id)
n <<- n + 1
})
observeEvent(input$remove, {
if (length(ids) > 0)
removeNotification(ids[1])
ids <<- ids[-1]
})
}
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
if (interactive()) {
# Display an important message that can be dismissed only by clicking the
# dismiss button.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Important message",
"This is an important message!"
))
})
}
)
# Display a message that can be dismissed by clicking outside the modal dialog,
# or by pressing Esc.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Somewhat important message",
"This is a somewhat important message.",
easyClose = TRUE,
footer = NULL
))
})
}
)
# Display a modal that requires valid input before continuing.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog"),
verbatimTextOutput("dataInfo")
),
server = function(input, output) {
# reactiveValues object for storing current data set.
vals <- reactiveValues(data = NULL)
# Return the UI for a modal dialog with data selection input. If 'failed' is
# TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("dataset", "Choose data set",
placeholder = 'Try "mtcars" or "abc"'
),
span('(Try the name of a valid data object like "mtcars", ',
'then a name of a non-existent object like "abc")'),
if (failed)
div(tags$b("Invalid name of data object", style = "color: red;")),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
# Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
# When OK button is pressed, attempt to load the data set. If successful,
# remove the modal. If not show another modal, but this time with a failure
# message.
observeEvent(input$ok, {
# Check that data object exists and is data frame.
if (!is.null(input$dataset) && nzchar(input$dataset) &&
exists(input$dataset) && is.data.frame(get(input$dataset))) {
vals$data <- get(input$dataset)
removeModal()
} else {
showModal(dataModal(failed = TRUE))
}
})
# Display information about selected data
output$dataInfo <- renderPrint({
if (is.null(vals$data))
"No data selected"
else
summary(vals$data)
})
}
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
